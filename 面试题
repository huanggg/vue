下面是部分问题：
  indexMethod({ rowIndex, $rowIndex, data, seq }) {
      return this.pageInfo.page == '1' ? rowIndex + 1 : (this.pageInfo.page - 1) * this.pageInfo.limit + rowIndex + 1
  },
第1题 谈谈变量提升
第2题 说说bind、call、apply的 区别？
          call 和 apply 的主要作用，是改变对象的执行上下文，并且是立即执行的。它们在参数上的写法略有区别。apply 
          bind 也能改变对象的执行上下文，它与 call 和 apply 不同的是，返回值是一个函数，并且需要稍后再调用一下，才会执行。
          猫.吃鱼.call(狗，鱼)
          狗就吃到鱼了
          
            var foo = {
                value: 1
            };

            function bar() {
                console.log(this.value);
            }

            bar.call(foo); // 1
            //call 改变了 this 的指向，指向到 foo
            //bar 函数执行了
第3题 如何实现一个 bind 函数？  
第4题 请实现一个 call 函数
第5题 如何实现一个 apply 函数？
第6题 简单说下原型链？
         原型:
            每个函数都会默认有一个prototype属性，它是一个指针，指向此函数的原型对象。而构造函数作为一个函数
            同样拥有自己的原型对象，而通过构造函数生成的对象实例中，拥有一个_proto_ 属性，它指向构造函数的原型对象.
            我们把构造函数的原型对象称为对象实例的原型。
         原型链
            我们创建的每个函数都有一个prototype(原型)属性，这个属性是一个指针，一个对象
            无论什么时候，我们只要创建一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性
            这个属性对象指向函数的原型对象。在默认情况下，所有原型对象都会自动获得一个 constroctor（构造函数）属性  
            这个属性包含一个指向prototype属性所在函数的指针
            把这个有__proto__串起来的直到Object.prototype.__proto__为null的链叫做原型链。原型链实际上就是js中数据继承的继承链          
第7题 怎么判断对象类型？
            console.log(Object.prototype.toString.call("jerry"));//[object String]
            console.log(Object.prototype.toString.call(12));//[object Number]
            console.log(Object.prototype.toString.call(true));//[object Boolean]
            console.log(Object.prototype.toString.call(undefined));//[object Undefined]
            console.log(Object.prototype.toString.call(null));//[object Null]
            console.log(Object.prototype.toString.call({name: "jerry"}));//[object Object]
            console.log(Object.prototype.toString.call(function(){}));//[object Function]
            console.log(Object.prototype.toString.call([]));//[object Array]
            console.log(Object.prototype.toString.call(new Date));//[object Date]
            console.log(Object.prototype.toString.call(/\d/));//[object RegExp]
            function Person(){};
            console.log(Object.prototype.toString.call(new Person));//[object Object]
第8题 说说箭头函数的特点
            普通函数与箭头函数有个微小的不同点。 箭头函数没有自己的this值 ，其this值是通
            过继承其它传入对象而获得的,通常来说是上一级外部函数的 this 的指向。
            函数体内的this对象就是定义时所在的对象，而不是使用时所在的对象
第9题 如何确定This指向
           1.以函数的形式调用时，this永远都是window
           2.以方法的形式调用时，this就是调用方法的那个对象
           3.以构造函数的形式调用时，this是新创建的那个对象
           4.通过call()或apply()改变函数执行环境的情况况下，this就会指向其他对象
第10题 async、await 的优缺点
              优点：
            1、async函数自带执行器，自动执行，无需next
            2、yield命令后面只能是 Thunk 函数或 Promise 对象，而async函数的await命令后面，可以是 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成立即 resolved 的 Promise 对象）。
            3、async函数的返回值是 Promise 对象，这比 Generator 函数的返回值是 Iterator
            async和await，比起星号和yield，语义更清楚了。async表示函数里有异步操作，await表示紧跟在后面的表达式需要等待结果
第11题 generator 原理
            function* gen(arg){
              yield 2;
              yield arg;
            }
            let genHandle = gen(3);
            for(let i of genHandle){
              console.log(i);   // 依次打印：2，3
            }
            let genHandle2 = gen(4);
            console.log(genHandle2.next()); // { value: 2, done: false }  返回值可以作为下一个next()的入参
            console.log(genHandle2.next()); // { value: 4, done: false }
            console.log(genHandle2.next()); // { value: undefined, done: true }
第12题 对Promise的理解
         Promise 的 API
            三个状态：pending，fulfilled，or rejected
            Promise.resolve()
            Promise.reject()
            Promise.prototype.catch()
            Promise.prototype.finally()
            Promise.all()

第14题 垃圾回收 
           1 标记回收
           2 引用回收
第15题 说说你对闭包的理解
           闭包是能够访问另一个函数作用域中变量的函数(这个“另外一个函数”，通常指的是包含闭包函数的外部函数)
           1 优点
            1 加强代码封装性，用于设计私有的方法与变量（例如jquery）
            2 为变量存储内存提供途径（在内存中维持了一个变量）
           2 缺点
            1 过多的使用闭包，可能导致内存泄露
第16题 基本数据类型和引⽤类型在存储上的差别
           基本数据类型是存放在栈区的
           引用类型的赋值其实是对象保存在栈区地址指针的赋值，所以两个变量指向同一个对象，任何的操作都会互相影响.
           引用类型的存储需要在内存的栈区和堆区共同完成，栈区保存变量标识符和指向堆内存的地址
第17题 浏览器 Eventloop 和 Node 中的有什么区别
            众所周知 JS 是门非阻塞单线程语言，因为在最初 JS 就是为了和浏览器交互而诞生的。如果 JS 是门多线程的语言话，我们在多个线程中处理 DOM 就可能会发生问题（一个线程中新加节点，另一个线程中删除节点），当然可以引入读写锁解决这个问题。
            JS 在执行的过程中会产生执行环境，这些执行环境会被顺序的加入到执行栈中。如果遇到异步的代码，会被挂起并加入到 Task（有多种 task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为
            console.log('script start');
            setTimeout(function() {
              console.log('setTimeout');
            }, 0);
            console.log('script end');         
            以上代码虽然 setTimeout 延时为 0，其实还是异步。这是因为 HTML5 标准规定这个函数第二个参数不得小于 4 毫秒，不足会自动增加。所以 setTimeout还是会在 script end 之后打印。
            不同的任务源会被分配到不同的 Task队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。
            console.log('script start');
            setTimeout(function() {
              console.log('setTimeout');
            }, 0);
            new Promise((resolve) => {
                console.log('Promise')
                resolve()
            }).then(function() {
              console.log('promise1');
            }).then(function() {
              console.log('promise2');
            });
            console.log('script end');
            // script start => Promise => script end => promise1 => promise2 => setTimeout           
            以上代码虽然 setTimeout 写在 Promise 之前，但是因为 Promise 属于微任务而 setTimeout属于宏任务，所以会有以上的打印。
            微任务包括 process.nextTick ，promise ，Object.observe，MutationObserver
            宏任务包括 script ， setTimeout ，setInterval，setImmediate ，I/O ，UI renderin
            很多人有个误区，认为微任务快于宏任务，其实是错误的。因为宏任务中包括了 script ，浏览器会先执行一个宏任务，接下来有异步代码的话就先执行微任务
            所以正确的一次 Event loop 顺序是这样的
            执行同步代码，这属于宏任务
            执行栈为空，查询是否有微任务需要执行
            执行所有微任务
            必要的话渲染 UI
            然后开始下一轮 Event loop，执行宏任务中的异步代码
            通过上述的 `Event loop` 顺序可知，如果宏任务中的异步代码有大量的计算并且需要操作 `DOM` 的话，
            为了更快的 界面响应，我们可以把操作 `DOM` 放入微任务中
第18题 怎样理解setTimeout 执行误差
            要先执行同步任务，才会执行异步任务；
            异步任务中，微任务执行顺序大于宏任务执行顺序。
第19题 说说函数节流和防抖
第20题 数组降维
第21题 请实现一个深拷贝
            function deepCope(obj){
                  let _obj = JSON.stringify(obj),
                  objClone = JSON.parse(_obj);
                return objClone  
            }
              let a=[0,1,[2,3],4],
              b=deepClone(a);
第22题 typeof 于 instanceof 区别
第23题 cookie和localSrorage、session、indexDB 的区别
第24题 怎么判断页面是否加载完成？
第25题 说说 jsonp 原理
        Jsonp(JSON with Padding) 是 json 的一种"使用模式"，可以让网页从别的域名（网站）那获取数据，即跨域读取数据。
        客户端通过与调用脚本一模一样的方式，来调用跨域服务器上动态生成的js格式文件（一般以JSON为后缀），显而易见，服务器之所以要动态生成JSON文件，目的就在于把客户端需要的数据装入进去。
        客户端在对JSON文件调用成功之后，也就获得了自己所需的数据，剩下的就是按照自己需求进行处理和展现了，这种获取远程数据的方式看起来非常像AJAX，但其实并不一样。
        为了便于客户端使用数据，逐渐形成了一种非正式传输协议，也就是JSONP，该协议的一个要点就是允许用户传递一个callback参数给服务端，然后服务端返回数据时会将这个callback参数作为函数名来包裹住JSON数据，
        这样客户端就可以随意定制自己的函数来自动处理返回数据了。
        ajax和jsonp本质上是完全不同的东西。ajax的核心是通过XmlHttpRequest获取非本页内容，而jsonp的核心则是动态添加<script>标签来调用服务器提供的js脚本。
第26题 说说你对Service worker的理解
第27题 说说浏览器缓存机制
第28题 怎样选择合适的缓存策略
第29题 说说重绘（Repaint）和回流（Reflow）
第30题 如何优化图片
第31题 页面首屏渲染性能优化方案有哪些
第32题 浏览器性能问题-使用 Webpack 优化项目
第33题 Babel 原理
第34题 介绍下React 生命周期
第35题 react setState 机制
第36题 Vue的 nextTick 原理
第37题 Vue 生命周期
                beforeCreate
                     在实例初始化之前，这时data和$el不可见,
                created
                     实例已经创建完成之后被调用,这时data可见和$el不可见,
                beforeMount
                     在挂载开始之前被调用,这时data可见和$el可见,但是实例未挂载
                mounted                    
                     挂载实例 $el 被新创建的 vm.$el 替换
                beforeUpdate
                     数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，
                     这不会触发附加的重渲染过程。
                updated
                     由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。
                     当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。
                     然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。
                     该钩子在服务器端渲染期间不被调用。
                beforeDestroy
                     实例销毁之前调用。在这一步，实例仍然完全可用。
                destroyed
                     Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，
                     所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。                
第38题 Vue 双向绑定
             vue.js 是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter，getter，在数据变动时发布消息给订阅者，触发相应的监听回调。
第39题 v-model原理
            <input type="text" :value="msg" @change="msg=$event.target.value">
第40题 watch 和 computed 的区别和运用的场景
             1 从属性名上，computed是计算属性，也就是依赖其它的属性计算所得出最后的值。watch是去监听一个值的变化，然后执行相对应的函数。
             2 从实现上，computed的值在getter执行后是会缓存的，只有在它依赖的属性值改变之后，下一次获取computed的值时才会重新调用对应的getter来计算。watch在每次监听的值变化时，都会执行回调。
               其实从这一点来看，都是在依赖的值变化之后，去执行回调。很多功能本来就很多属性都可以用，只不过有更适合的。如果一个值依赖多个属性（多对一），
               用computed肯定是更加方便的。如果一个值变化后会引起一系列操作，或者一个值变化会引起一系列值的变化（一对多），用watch更加方便一些。
             3 watch的回调里面会传入监听属性的新旧值，通过这两个值可以做一些特定的操作。computed通常就是简单的计算。
             4 watch和computed并没有哪个更底层，watch内部调用的是vm.$watch，它们的共同之处就是每个定义的属性都单独建立了一个Watcher对象。

第41题 Vue 的父子通信
       父组件通过 prop 给子组件下发数据，子组件通过$emit触发事件给父组件发送消息，即 prop 向下传递，事件向上传递。
                父子组件的生命执行顺序
                      父beforeCreate->父created->父beforeMount->子beforeCreate->子created->子beforeMount->子mounted->父mounted

                       子组件更新过程
                    父beforeUpdate->子beforeUpdate->子updated->父updated

                        父组件更新过程
                    父beforeUpdate->父updated

                         销毁过程
                    父beforeDestroy->子beforeDestroy->子destroyed->父destroyed 
第42题 简述路由原理
第43题 MVVM-脏数据检测
第44题 MVVM-数据劫持
第45题 React V16 生命周期函数用法
第46题 Vue 和 React 区别
第47题 介绍下虚拟 DOM，对虚拟 DOM 的理解
第48题 路由鉴权 (路由守卫)
            1:全局守卫
            2:路由守卫
            3:组件守卫
第49题 TCP 3次握手
       （1）第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认。
       （2）第二次握手：服务器B收到SYN包，必须确认客户A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态。
       （3）第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。
     四次挥手
       （1）客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。
       （2）服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。
       （3）服务器B关闭与客户端A的连接，发送一个FIN给客户端A。
       （4）客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。
第50题 TCP 拥塞控制
第51题 慢开始算法
第52题 拥塞避免算法
第53题 tcp 快速重传
第54题 TCP New Ren 改进后的快恢复
      TCP和UDP的区别 ?
             1、TCP面向连接（如打电话要先拨号建立连接）；UDP是无连接的，即发送数据之前不需要建立连接??（连接和无连接）
             2、TCP提供可靠的服务。即通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付（可靠和不可靠）
             3、TCP面向字节流，实际上是TCP把数据看成一连串无结构的字节流；UDP是面向报文的? ? UDP没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如IP电话，实时视频会议等）（字节流和报文加拥塞）
             4、每一条TCP连接只能是点到点的; UDP支持一对一，一对多，多对一和多对多的交互通信（一对一和一对多）
             5、TCP首部开销20字节;UDP的首部开销小，只有8个字节（开销问题）
             6、TCP的逻辑通信信道是全双工的可靠信道，UDP则是不可靠
第55题 HTTPS 握手
            HTTPS工作原理
            一、首先HTTP请求服务端生成证书，客户端对证书的有效期、合法性、域名是否与请求的域名一致、证书的公钥（RSA加密）等进行校验；
            二、客户端如果校验通过后，就根据证书的公钥的有效， 生成随机数，随机数使用公钥进行加密（RSA加密）；
            三、消息体产生的后，对它的摘要进行MD5（或者SHA1）算法加密，此时就得到了RSA签名；
            四、发送给服务端，此时只有服务端（RSA私钥）能解密。
            五、解密得到的随机数，再用AES加密，作为密钥（此时的密钥只有客户端和服务端知道）。
第56题 从输入 URL 到页面加载全过程
           1 域名解析
           2 发起tcp的三次握手
           3 发起http请求
           4 服务器响应http请求
           5 浏览器解析html代码，并请求html代码中的资源（如js css 图片）
           6 浏览器对页面进行渲染呈现给用户
第57题 HTTP 常用状态码 301 302 304 403
第58题 常见排序-冒泡排序
       let array=[5,2,4,3,1,9,8]

      function bubbleSort(array){ 
       for(let i=0;i<array.length;i++){//第一次遍历数组，控制数组经过多少轮排序
         for(let j=0;j<array.length-1;j++){ //第二次遍历，比较任意相邻两项的大小
           if( array[j]>array[j+1] ){// 交换两项值得位置，值小的项排在前面
              let tem=''
              tem=array[j]
              array[j]=array[j+1]
              array[j+1]=tem
           }
         }
       }
       return array
     }
第59题 常见排序-插入排序
          1.基本思想
             将一个元素插入到其它已经有序的牌中的适当位置，因此其他所有元素在插入之前都向右移动一位，为新元素腾出空间。

          2.特点
            插入排序所需的时间取决于输入中元素的初始顺序，一个有序的序列比随机顺序的序列花费的时间更少。
            对于随进排列的长度为N且主键不重复的数组，最坏情况下需要输入N2/2

            function insert(array) {
                    for (var i = 1; i < array.length; i++) {
                        var key = array[i];
                        var j = i - 1;
                        while (j >= 0 && array[j] > key) {
                            array[j + 1] = array[j];
                            j--;
                        }
                        array[j + 1] = key;
                    }
                    return array;
            }
第60题 常见排序-选择排序
          1.基本思想
              找到数组最小的元素，将它和数组红第一个元素交换位置，接下来，在剩下的元素中找到最小的元素，将它与数组的第二个元素交换位置，往复如此，直到将整个数组排序。基本点就是不断地选择剩余元素之中的最小者。
          2.特点
              运行时间和输入无关。
              对于长度为N的数组，选择排序需要大约N2/2次比较和N次交换

              数据移动是最少的
              交换次数和数组的大小是线性关系。

              使用javascript实现的效果

              function select(array){
                  var len=array.length;
                  for(var i=0;i<len-1;i++){  //这里之所以是len-1，是因为到最后两个元素，交换位置，整个数组就已经排好序了。
                      var minnum=array[i];
                      for(var j=i+1;j<len;j++){ // j=i+1是把与自己比较的情况给省略掉
                          if(array[j]<minnum){
                            var c;
                            c=minnum;
                            minnum=array[j];    //交换两个值
                            array[j]=c;
                          }
                      }
                      array[i]=minnum;      
                  }
                  return array;

              }
第61题 常见排序-归并排序
第62题 常见排序-快排
        let array=[5,2,4,3,1,9,8]
   
         function quickSort(arr){

            if(arr.length<=1){
              return arr
            }
            let leftArr=[]
            let rightArr=[]
            let q=arr[0]
            for(let i=1;i<arr.length;i++){
              if( q < arr[i] ){
                rightArr.push( arr[i] )
              }else{
                leftArr.push( arr[i] )
              }
            }
            return [].concat(quickSort(leftArr),[q],quickSort(rightArr))
       }
        quickSort(array)

第63题 常见排序-堆排序
第65题 介绍下设计模式-工厂模式
第66题 介绍下设计模式-单例模式
第67题 介绍下设计模式-适配器模式
第68题 介绍下设计模式-装饰模式
第69题 介绍下设计模式-代理模式
第70题 介绍下设计模式-发布-订阅模式
第71题 Vue 响应式原理
     实现一个Vue的双向绑定      
          // 数据
          const data = {
            text: 'default'
          };
          const input = document.getElementById('input');
          const span = document.getElementById('span');
          // 数据劫持
          Object.defineProperty(data, 'text', {
            // 数据变化 —> 修改视图
            set(newVal) {
              input.value = newVal;
              span.innerHTML = newVal;
            }
          });
          // 视图更改 --> 数据变化
          input.addEventListener('keyup', function(e) {
            data.text = e.target.value;
          });
     实现一个事件代理
          <ul id="color-list">
          <li>red</li>
          <li>yellow</li>
          <li>blue</li>
          <li>green</li>
          <li>black</li>
          <li>white</li>
        </ul>
        <script>
          (function () {
            var color_list = document.getElementById('color-list');
            color_list.addEventListener('click', showColor, true);
            function showColor(e) {
              var x = e.target;
              if (x.nodeName.toLowerCase() === 'li') {
                alert(x.innerHTML);
              }
            }
          })();
        </script>
第72题 实现一个new操作符
第73题 实现一个JSON.stringify
第74题 实现一个JSON.parse
第75题 手写一个继承
第76题 实现一个JS函数柯里化
第77题 请手写一个Promise(中高级必考)
第78题 手写防抖(Debouncing)和节流(Throttling)
第79题 实现一个instanceOf
第80题 实现一个私有变量
第81题 使用setTimeout代替setInterval进行间歇调用
第82题 数组中的forEach和map的区别
        forEach会改变原数组,是异步的,map不会改变原数组,会返回新数组,
        没有办法终止或者跳出forEach()循环，除非抛出异常，所以想执行一个数组是否满足什么条件，返回布尔值，可以用一般的for循环实现，
第83题 for in和for of的区别
第84题 写一个发布订阅 EventEmitter方法
第85题 let、var、const区别
第86题 typeof和instanceof 区别
第87题 常见的继承的几种方法
             方式一、原型链继承
             方式二: 借用构造函数继承  call apply
             方式三: 原型链+借用构造函数的组合继承
             方式三: ES6中class 的继承
             需要注意的是，class关键字只是原型的语法糖，JavaScript继承仍然是基于原型实现的。
             class Person {
                  //调用类的构造方法
                  constructor(name, age) {
                      this.name = name
                      this.age = age
                  }
                  //定义一般的方法
                  showName() {
                      console.log("调用父类的方法")
                      console.log(this.name, this.age);
                  }
              }
              let p1 = new  Person('kobe', 39)
              console.log(p1)
              //定义一个子类
              class Student extends Person {
                  constructor(name, age, salary) {
                      super(name, age)//通过super调用父类的构造方法
                      this.salary = salary
                  }
                  showName() {//在子类自身定义方法
                      console.log("调用子类的方法")
                      console.log(this.name, this.age, this.salary);
                  }
              }
              let s1 = new Student('wade', 38, 1000000000)            
              s1.showName()
第88题 常见的浏览器内核有哪些?
第89题 浏览器的主要组成部分是什么？
第90题 浏览器是如何渲染UI的？
第91题 浏览器如何解析css选择器？
第92题 DOM Tree是如何构建的？
第93题 重绘与重排的区别？
        一旦渲染树构建完成，就要开始绘制（paint）页面元素了。当DOM的变化引发了元素几何属性的变化，比如改变元素的宽高，元素的位置，导致浏览器不得不重新计算元素的几何属性，并重新构建渲染树，
        这个过程称为“重排”。完成重排后，要将重新构建的渲染树渲染到屏幕上，这个过程就是“重绘”。简单的说，重排负责元素的几何属性更新，重绘负责元素的样式更新。而且，重排必然带来重绘
        但是重绘未必带来重排。比如，改变某个元素的背景，这个就不涉及元素的几何属性，所以只发生重绘。
    重排触发机制
        添加或删除可见的DOM元素
        元素位置改变
        元素本身的尺寸发生改变
        内容改变
        页面渲染器初始化
        浏览器窗口大小发生改变
第94题 如何触发重排和重绘？
第95题 如何避免重绘或者重排？
第96题 前端如何实现即时通讯？
第97题 什么是浏览器同源策略？
        同源策略/SOP（Same origin policy）是一种约定，由Netscape公司1995年引入浏览器，它是浏览器最核心也最基本的安全功能，
        如果缺少了同源策略，浏览器很容易受到XSS、CSFR等攻击。所谓同源是指"协议+域名+端口"三者相同，即便两个不同的域名指向同一个ip地址，也非同源。
第98题 怎样解决跨域问题？
  跨域解决方案
        1、 通过jsonp跨域
        2、 document.domain + iframe跨域
        3、 location.hash + iframe
        4、 window.name + iframe跨域
        5、 postMessage跨域
        6、 跨域资源共享（CORS）
        7、 nginx代理跨域
        8、 nodejs中间件代理跨域
        9、 WebSocket协议跨域
第99题 时间格式化
第100题 说说对html 语义化的理解
第101题 说说常用的 meta 标签
第102题 说说两种盒模型以及区别
第103题 css reset 和 normalize.css 有什么区别
第104题 怎样让元素水平垂直居中
第105题 说说选择器的权重计算方式
第106题 清除浮动的方法
第107题 说说你对 BFC 的理解
第108题 import 和 link 区别
第109题 说下 [1, 2, 3].map(parseInt) 结果
第110题 介绍下浏览器事件委托
第111题 10w 条记录的数组，一次性渲染到页面上，如何处理可以不冻结UI？
             分析：
                  ·数据量过大，出现卡顿感的主要原因是，在每次循环中，都会修改 DOM 结构（导致页面dom树重绘,回流），并且由于数据量大，导致循环执行时间过长（导致页面卡顿），浏览器的渲染帧率过低（导致闪屏现象)。
                  ·从 减少 DOM 操作次数 和 缩短循环时间 两个方面减少主线程阻塞的时间.
                  ·通过 DocumentFragment 的使用，减少 DOM 操作次数，降低回流对性能的影响;
                  （DocumentFragment是DOM的节点，但并不是DOM树的一部分，存在内存中。当append元素到document中时，会同时计算样式表，而append元素到documentFragment时，不会计算元素的样式表，所以documentFragment性能更优。）
                  ·在缩短循环时间方面，我们可以通过 分治 的思想，将 100000 个 li 分批插入到页面中，并且我们通过 requestAnimatiomnFrame 在页面重绘前插入新节点。
                  （requestAnimatiomnFrame的步伐跟着系统刷新的步伐走。能保证回调函数在屏幕每一次的刷新间隔只被执行一次，这样就不会引起丢帧现象。）

                  DocumentFragment节点不属于文档树，继承的parentNode属性总是null。它有一个很实用的特点，当请求把一个DocumentFragment节点插入文档树时，插入的不是DocumentFragment自身，而是它的所有子孙节点。
                  这个特性使得DocumentFragment成了占位符，暂时存放那些一次插入文档的节点

                 代码实现：

                 function loop() {              
                      window.requestAnimationFrame(()=>{
                          let fragment = document.createDocumentFragment()//创建DocumentFragment节点
                          for (let i = 0; i < 100000; i++) {
                              let li = document.createElement('li');
                              li.innerText = 'test'
                              fragment.appendChild(li);
                          }
                        document.body.appendChild(fragment);//然后用appendChild插入文档中             
                      })
                  }
                  loop()
第112题 如何实现一个左右固定，中间自适应的三栏布局
第113题 如何实现一个自适应的正方形
第114题 如何用css实现一个三角形
第115题 介绍下 positon 属性
第116题 说说渐进增强和优雅降级
第117题 defer和async区别
第118题 实现sleep函数
第119题 实现 lazyMan
第120题 获取元素的最终background-color
第121题 xss与csrf 的理解
       xss 跨站脚本攻击    恶意攻击者往 Web 页面里插入恶意 Script 代码，当用户浏览该页之时，嵌入其中 Web 里面的 Script 代码会被执行，从而达到恶意攻击用户的目的。
         类型: 
             1 反射攻击（是指xss代码在请求的url中） 
             2 存储的 XSS攻击 （具有攻击性的脚本被保存到了服务器端（数据库，内存，文件系统））
         情景再现
            （1）在网页 input 或者 textarea 中输入 <script>alert('xss')</script>或者其他脚本
            （2）直接使用 URL 参数攻击
                 https://www.baidu.com?jarttoTest=<script>alert(document.cookie)</script>
          XSS防御
             （1）输入过滤，避免 XSS 的方法之一主要是将用户输入的内容进行过滤。对所有用户提交内容进行可靠的输入验证，包括对 URL、查询关键字、POST数据等，仅接受指定长度范围内、采用适当格式、采用所预期的字符的内容提交，对其他的一律过滤。(客户端和服务器都要)
             （2）输出转义
               
       csrf 跨站请求伪造   冒充用户在站内的正常操作
          csrf防御
             （1）验证 HTTP Referer 字段，利用 HTTP 头中的 Referer 判断请求来源是否合法，Referer记录了该 HTTP 请求的来源地址。
             （2）在请求地址中添加 token 并验证
             （3）在 HTTP 头中自定义属性并验证
        
第122题 事件代理的优缺点
              1 优点
                1 减少了dom 的操作，节省内存（在ul 上代理所有li的click事件）
                2 实现为新增元素自动添加或移除事件 (不用为新添加的li绑定click事件)
              2 缺点
                1 事件代理基于冒泡，对于不冒泡的事件不支持
                2 层级过多，冒泡过程中，可能会被某层阻止掉
          
 第123题  React 中 keys 的作用是什么？
                Keys 是 React 用于追踪哪些列表中元素被修改、被添加或者被移除的辅助标识。

                render () {
                  return (
                    <ul>
                      {this.state.todoItems.map(({item, key}) => {
                        return <li key={key}>{item}</li>
                      })}
                    </ul>
                  )
                }
                在开发过程中，我们需要保证某个元素的 key 在其同级元素中具有唯一性。在 React Diff 算法中 React 会借助元素的 Key 值来判断该元素是新近创建的还是被移动而来的元素，从而减少不必要的元素重渲染。
                此外，React 还需要借助 Key 值来判断元素与本地状态的关联关系，因此我们绝不可忽视转换函数中 Key 的重要性。

 第124题  调用 setState 之后发生了什么？
                在代码中调用 setState 函数之后，React 会将传入的参数对象与组件当前的状态合并，然后触发所谓的调和过程（Reconciliation）。经过调和过程，React 会以相对高效的方式根据新的状态构建 React 元素树并且着手重新渲染整个 UI 界面。
                在 React 得到元素树之后，React 会自动计算出新的树与老树的节点差异，然后根据差异对界面进行最小化重渲染。在差异计算算法中，React 能够相对精确地知道哪些位置发生了改变以及应该如何改变，这就保证了按需更新，而不是全部重新渲染。

 第125题   react 生命周期函数
                  初始化阶段：

                  getDefaultProps:获取实例的默认属性
                  getInitialState:获取每个实例的初始化状态
                  componentWillMount：组件即将被装载、渲染到页面上
                  render:组件在这里生成虚拟的 DOM 节点
                  componentDidMount:组件真正在被装载之后
                  运行中状态：

                  componentWillReceiveProps:组件将要接收到属性的时候调用
                  shouldComponentUpdate:组件接受到新属性或者新状态的时候（可以返回 false，接收数据后不更新，阻止 render 调用，后面的函数不会被继续执行了）
                  componentWillUpdate:组件即将更新不能修改属性和状态
                  render:组件重新描绘
                  componentDidUpdate:组件已经更新
                  销毁阶段：

                  componentWillUnmount:组件即将销毁
                  shouldComponentUpdate 是做什么的，（react 性能优化是哪个周期函数？）
                  shouldComponentUpdate 这个方法用来判断是否需要调用 render 方法重新描绘 dom。因为 dom 的描绘非常消耗性能，如果我们能在 shouldComponentUpdate 方法中能够写出更优化的 dom diff 算法，可以极大的提高性能。



  第126题   为什么虚拟 dom 会提高性能?(必考)
                虚拟 dom 相当于在 js 和真实 dom 中间加了一个缓存，利用 dom diff 算法避免了没有必要的 dom 操作，从而提高性能。
                用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，
                记录两棵树差异把 2 所记录的差异应用到步骤 1 所构建的真正的 DOM 树上，视图就更新了。

  第127题    react diff 原理（常考，大厂必考）
                把树形结构按照层级分解，只比较同级元素。
                给列表结构的每个单元添加唯一的 key 属性，方便比较。
                React 只会匹配相同 class 的 component（这里面的 class 指的是组件的名字）
                合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.
                选择性子树渲染。开发人员可以重写 shouldComponentUpdate 提高 diff 的性能。

 第128题    React 中 refs 的作用是什么？
                  Refs 是 React 提供给我们的安全访问 DOM 元素或者某个组件实例的句柄。我们可以为元素添加 ref 属性然后在回调函数中接受该元素在 DOM 树中的句柄
 第129题      展示组件(Presentational component)和容器组件(Container component)之间有何不同
                      展示组件关心组件看起来是什么。展示专门通过 props 接受数据和回调，并且几乎不会有自身的状态，但当展示组件拥有自身的状态时，通常也只关心 UI 状态而不是数据的状态。
                      容器组件则更关心组件是如何运作的。容器组件会为展示组件或者其它容器组件提供数据和行为(behavior)，它们会调用 Flux actions，并将其作为回调提供给展示组件。容器组件经常是有状态的，因为它们是(其它组件的)数据源。
 第130题      类组件(Class component)和函数式组件(Functional component)之间有何不同
                      类组件不仅允许你使用更多额外的功能，如组件自身的状态和生命周期钩子，也能使组件直接访问 store 并维持状态
                      当组件仅是接收 props，并将组件自身渲染到页面时，该组件就是一个 '无状态组件(stateless component)'，可以使用一个纯函数来创建这样的组件。这种组件也被称为哑组件(dumb components)或展示组件
 第131题       (组件的)状态(state)和属性(props)之间有何不同
                      State 是一种数据结构，用于组件挂载时所需数据的默认值。State 可能会随着时间的推移而发生突变，但多数时候是作为用户事件行为的结果。
                      Props(properties 的简写)则是组件的配置。props 由父组件传递给子组件，并且就子组件而言，props 是不可变的(immutable)。组件不能改变自身的 props，但是可以把其子组件的 props 放在一起(统一管理)。Props 也不仅仅是数据--回调函数也可以通过 props 传递。
 第132题       何为受控组件(controlled component)
                      在 HTML 中，类似 <input>, <textarea> 和 <select> 这样的表单元素会维护自身的状态，并基于用户的输入来更新。当用户提交表单时，前面提到的元素的值将随表单一起被发送。但在 React 中会有些不同，包含表单元素的组件将会在 state 中追踪输入的值，并且每次调用回调函数时，如 onChange 会更新 state，重新渲染组件。一个输入表单元素，它的值通过 React 的这种方式来控制，这样的元素就被称为"受控元素"。

 第133题       何为高阶组件(higher order component)
                      高阶组件是一个以组件为参数并返回一个新组件的函数。HOC 运行你重用代码、逻辑和引导抽象。最常见的可能是 Redux 的 connect 函数。除了简单分享工具库和简单的组合，HOC 最好的方式是共享 React 组件之间的行为。如果你发现你在不同的地方写了大量代码来做同一件事时，就应该考虑将代码重构为可重用的 HOC。

 第134题       为什么建议传递给 setState 的参数是一个 callback 而不是一个对象
                       因为 this.props 和 this.state 的更新可能是异步的，不能依赖它们的值去计算下一个 state。


 第135题        (在构造函数中)调用 super(props) 的目的是什么
                       在 super() 被调用之前，子类是不能使用 this 的，在 ES2015 中，子类必须在 constructor 中调用 super()。传递 props 给 super() 的原因则是便于(在子类中)能在 constructor 访问 this.props。

 第135题       应该在 React 组件的何处发起 Ajax 请求
                       在 React 组件中，应该在 componentDidMount 中发起网络请求。这个方法会在组件第一次“挂载”(被添加到 DOM)时执行，在组件的生命周期中仅会执行一次。更重要的是，你不能保证在组件挂载之前 Ajax 请求已经完成，如果是这样，也就意味着你将尝试在一个未挂载的组件上调用 setState，这将不起作用。在 componentDidMount 中发起网络请求将保证这有一个组件可以更新了。





                  
